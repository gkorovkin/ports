Index: webrtc/src/webrtc/modules/rtp_rtcp/source/rtp_packet.cc
===================================================================
--- webrtc.orig/src/webrtc/modules/rtp_rtcp/source/rtp_packet.cc	2017-01-12 16:03:55.238153520 +0300
+++ webrtc/src/webrtc/modules/rtp_rtcp/source/rtp_packet.cc	2017-01-12 16:03:55.236153530 +0300
@@ -95,32 +95,6 @@ bool Packet::Parse(rtc::CopyOnWriteBuffe
   return true;
 }
 
-bool Packet::Marker() const {
-  RTC_DCHECK_EQ(marker_, (data()[1] & 0x80) != 0);
-  return marker_;
-}
-
-uint8_t Packet::PayloadType() const {
-  RTC_DCHECK_EQ(payload_type_, data()[1] & 0x7f);
-  return payload_type_;
-}
-
-uint16_t Packet::SequenceNumber() const {
-  RTC_DCHECK_EQ(sequence_number_,
-                ByteReader<uint16_t>::ReadBigEndian(data() + 2));
-  return sequence_number_;
-}
-
-uint32_t Packet::Timestamp() const {
-  RTC_DCHECK_EQ(timestamp_, ByteReader<uint32_t>::ReadBigEndian(data() + 4));
-  return timestamp_;
-}
-
-uint32_t Packet::Ssrc() const {
-  RTC_DCHECK_EQ(ssrc_, ByteReader<uint32_t>::ReadBigEndian(data() + 8));
-  return ssrc_;
-}
-
 std::vector<uint32_t> Packet::Csrcs() const {
   size_t num_csrc = data()[0] & 0x0F;
   RTC_DCHECK_GE(capacity(), kFixedHeaderSize + num_csrc * 4);
@@ -160,48 +134,6 @@ void Packet::GetHeader(RTPHeader* header
       GetExtension<VideoOrientation>(&header->extension.videoRotation);
 }
 
-size_t Packet::headers_size() const {
-  return payload_offset_;
-}
-
-size_t Packet::payload_size() const {
-  return payload_size_;
-}
-
-size_t Packet::padding_size() const {
-  return padding_size_;
-}
-
-const uint8_t* Packet::payload() const {
-  return data() + payload_offset_;
-}
-
-rtc::CopyOnWriteBuffer Packet::Buffer() const {
-  return buffer_;
-}
-
-size_t Packet::capacity() const {
-  return buffer_.capacity();
-}
-
-size_t Packet::size() const {
-  size_t ret = payload_offset_ + payload_size_ + padding_size_;
-  RTC_DCHECK_EQ(buffer_.size(), ret);
-  return ret;
-}
-
-const uint8_t* Packet::data() const {
-  return buffer_.cdata();
-}
-
-size_t Packet::FreeCapacity() const {
-  return capacity() - size();
-}
-
-size_t Packet::MaxPayloadSize() const {
-  return capacity() - payload_offset_;
-}
-
 void Packet::CopyHeaderFrom(const Packet& packet) {
   RTC_DCHECK_GE(capacity(), packet.headers_size());
 
@@ -222,36 +154,6 @@ void Packet::CopyHeaderFrom(const Packet
   padding_size_ = 0;
 }
 
-void Packet::SetMarker(bool marker_bit) {
-  marker_ = marker_bit;
-  if (marker_) {
-    WriteAt(1, data()[1] | 0x80);
-  } else {
-    WriteAt(1, data()[1] & 0x7F);
-  }
-}
-
-void Packet::SetPayloadType(uint8_t payload_type) {
-  RTC_DCHECK_LE(payload_type, 0x7Fu);
-  payload_type_ = payload_type;
-  WriteAt(1, (data()[1] & 0x80) | payload_type);
-}
-
-void Packet::SetSequenceNumber(uint16_t seq_no) {
-  sequence_number_ = seq_no;
-  ByteWriter<uint16_t>::WriteBigEndian(WriteAt(2), seq_no);
-}
-
-void Packet::SetTimestamp(uint32_t timestamp) {
-  timestamp_ = timestamp;
-  ByteWriter<uint32_t>::WriteBigEndian(WriteAt(4), timestamp);
-}
-
-void Packet::SetSsrc(uint32_t ssrc) {
-  ssrc_ = ssrc;
-  ByteWriter<uint32_t>::WriteBigEndian(WriteAt(8), ssrc);
-}
-
 void Packet::SetCsrcs(const std::vector<uint32_t>& csrcs) {
   RTC_DCHECK_EQ(num_extensions_, 0u);
   RTC_DCHECK_EQ(payload_size_, 0u);
@@ -522,13 +424,5 @@ bool Packet::AllocateExtension(Extension
   return true;
 }
 
-uint8_t* Packet::WriteAt(size_t offset) {
-  return buffer_.data() + offset;
-}
-
-void Packet::WriteAt(size_t offset, uint8_t byte) {
-  buffer_.data()[offset] = byte;
-}
-
 }  // namespace rtp
 }  // namespace webrtc
Index: webrtc/src/webrtc/modules/rtp_rtcp/source/rtp_packet.h
===================================================================
--- webrtc.orig/src/webrtc/modules/rtp_rtcp/source/rtp_packet.h	2017-01-12 16:03:55.238153520 +0300
+++ webrtc/src/webrtc/modules/rtp_rtcp/source/rtp_packet.h	2017-01-12 16:03:55.237153525 +0300
@@ -12,9 +12,11 @@
 
 #include <vector>
 
+#include "webrtc/base/checks.h"
 #include "webrtc/base/basictypes.h"
 #include "webrtc/base/copyonwritebuffer.h"
 #include "webrtc/modules/rtp_rtcp/include/rtp_rtcp_defines.h"
+#include "webrtc/modules/rtp_rtcp/source/byte_io.h"
 
 namespace webrtc {
 struct RTPHeader;
@@ -40,42 +42,100 @@ class Packet {
   void IdentifyExtensions(const ExtensionManager* extensions);
 
   // Header.
-  bool Marker() const;
-  uint8_t PayloadType() const;
-  uint16_t SequenceNumber() const;
-  uint32_t Timestamp() const;
-  uint32_t Ssrc() const;
+  bool Marker() const {
+    RTC_DCHECK_EQ(marker_, (data()[1] & 0x80) != 0);
+    return marker_;
+  }
+  uint8_t PayloadType() const {
+    RTC_DCHECK_EQ(payload_type_, data()[1] & 0x7f);
+    return payload_type_;
+  }
+  uint16_t SequenceNumber() const {
+    RTC_DCHECK_EQ(sequence_number_,
+                  ByteReader<uint16_t>::ReadBigEndian(data() + 2));
+    return sequence_number_;
+  }
+  uint32_t Timestamp() const {
+    RTC_DCHECK_EQ(timestamp_, ByteReader<uint32_t>::ReadBigEndian(data() + 4));
+    return timestamp_;
+  }
+  uint32_t Ssrc() const {
+    RTC_DCHECK_EQ(ssrc_, ByteReader<uint32_t>::ReadBigEndian(data() + 8));
+    return ssrc_;
+  }
   std::vector<uint32_t> Csrcs() const;
 
   // TODO(danilchap): Remove this function when all code update to use RtpPacket
   // directly. Function is there just for easier backward compatibilty.
   void GetHeader(RTPHeader* header) const;
 
-  size_t headers_size() const;
+  size_t headers_size() const {
+    return payload_offset_;
+  }
 
   // Payload.
-  size_t payload_size() const;
-  size_t padding_size() const;
-  const uint8_t* payload() const;
+  size_t payload_size() const {
+    return payload_size_;
+  }
+  size_t padding_size() const {
+    return padding_size_;
+  }
+  const uint8_t* payload() const {
+    return data() + payload_offset_;
+  }
 
   // Buffer.
-  rtc::CopyOnWriteBuffer Buffer() const;
-  size_t capacity() const;
-  size_t size() const;
-  const uint8_t* data() const;
-  size_t FreeCapacity() const;
-  size_t MaxPayloadSize() const;
+  rtc::CopyOnWriteBuffer Buffer() const {
+    return buffer_;
+  }
+  size_t capacity() const {
+    return buffer_.capacity();
+  }
+  size_t size() const {
+    size_t ret = payload_offset_ + payload_size_ + padding_size_;
+    RTC_DCHECK_EQ(buffer_.size(), ret);
+    return ret;
+  }
+  const uint8_t* data() const {
+    return buffer_.cdata();
+  }
+  size_t FreeCapacity() const {
+    return capacity() - size();
+  }
+  size_t MaxPayloadSize() const {
+    return capacity() - payload_offset_;
+  }
 
   // Reset fields and buffer.
   void Clear();
 
   // Header setters.
   void CopyHeaderFrom(const Packet& packet);
-  void SetMarker(bool marker_bit);
-  void SetPayloadType(uint8_t payload_type);
-  void SetSequenceNumber(uint16_t seq_no);
-  void SetTimestamp(uint32_t timestamp);
-  void SetSsrc(uint32_t ssrc);
+  void SetMarker(bool marker_bit) {
+    marker_ = marker_bit;
+    if (marker_) {
+      WriteAt(1, data()[1] | 0x80);
+    } else {
+      WriteAt(1, data()[1] & 0x7F);
+    }
+  }
+  void SetPayloadType(uint8_t payload_type) {
+    RTC_DCHECK_LE(payload_type, 0x7Fu);
+    payload_type_ = payload_type;
+    WriteAt(1, (data()[1] & 0x80) | payload_type);
+  }
+  void SetSequenceNumber(uint16_t seq_no) {
+    sequence_number_ = seq_no;
+    ByteWriter<uint16_t>::WriteBigEndian(WriteAt(2), seq_no);
+  }
+  void SetTimestamp(uint32_t timestamp) {
+    timestamp_ = timestamp;
+    ByteWriter<uint32_t>::WriteBigEndian(WriteAt(4), timestamp);
+  }
+  void SetSsrc(uint32_t ssrc) {
+    ssrc_ = ssrc;
+    ByteWriter<uint32_t>::WriteBigEndian(WriteAt(8), ssrc);
+  }
 
   // Writes csrc list. Assumes:
   // a) There is enough room left in buffer.
@@ -140,8 +200,12 @@ class Packet {
   // unchanged.
   bool AllocateExtension(ExtensionType type, uint8_t length, uint16_t* offset);
 
-  uint8_t* WriteAt(size_t offset);
-  void WriteAt(size_t offset, uint8_t byte);
+  uint8_t* WriteAt(size_t offset) {
+    return buffer_.data() + offset;
+  }
+  void WriteAt(size_t offset, uint8_t byte) {
+    buffer_.data()[offset] = byte;
+  }
 
   const ExtensionManager* extensions_;
 
@@ -164,13 +228,13 @@ class Packet {
 };
 
 template <typename Extension>
-bool Packet::HasExtension() const {
+inline bool Packet::HasExtension() const {
   uint16_t offset = 0;
   return FindExtension(Extension::kId, Extension::kValueSizeBytes, &offset);
 }
 
 template <typename Extension, typename... Values>
-bool Packet::GetExtension(Values... values) const {
+inline bool Packet::GetExtension(Values... values) const {
   uint16_t offset = 0;
   if (!FindExtension(Extension::kId, Extension::kValueSizeBytes, &offset))
     return false;
@@ -178,7 +242,7 @@ bool Packet::GetExtension(Values... valu
 }
 
 template <typename Extension, typename... Values>
-bool Packet::SetExtension(Values... values) {
+inline bool Packet::SetExtension(Values... values) {
   uint16_t offset = 0;
   if (!AllocateExtension(Extension::kId, Extension::kValueSizeBytes, &offset))
     return false;
@@ -186,7 +250,7 @@ bool Packet::SetExtension(Values... valu
 }
 
 template <typename Extension>
-bool Packet::ReserveExtension() {
+inline bool Packet::ReserveExtension() {
   uint16_t offset = 0;
   if (!AllocateExtension(Extension::kId, Extension::kValueSizeBytes, &offset))
     return false;
