Index: webrtc/src/webrtc/pc/srtpfilter.h
===================================================================
--- webrtc.orig/src/webrtc/pc/srtpfilter.h	2017-01-12 16:02:36.504516475 +0300
+++ webrtc/src/webrtc/pc/srtpfilter.h	2017-01-12 16:02:36.501516489 +0300
@@ -28,7 +28,7 @@
 
 // Forward declaration to avoid pulling in libsrtp headers here
 struct srtp_event_data_t;
-struct srtp_ctx_t_;
+struct srtp_ctx_t;
 
 namespace cricket {
 
@@ -225,7 +225,7 @@ class SrtpSession {
   static void HandleEventThunk(srtp_event_data_t* ev);
 
   rtc::ThreadChecker thread_checker_;
-  srtp_ctx_t_* session_;
+  srtp_ctx_t* session_;
   int rtp_auth_tag_len_;
   int rtcp_auth_tag_len_;
   std::unique_ptr<SrtpStat> srtp_stat_;
Index: webrtc/src/webrtc/pc/srtpfilter.cc
===================================================================
--- webrtc.orig/src/webrtc/pc/srtpfilter.cc	2017-01-12 16:02:36.504516475 +0300
+++ webrtc/src/webrtc/pc/srtpfilter.cc	2017-01-12 16:02:36.502516484 +0300
@@ -14,8 +14,10 @@
 
 #include <algorithm>
 
-#include "third_party/libsrtp/include/srtp.h"
-#include "third_party/libsrtp/include/srtp_priv.h"
+extern "C" {
+#include "srtp/srtp.h"
+#include "srtp/srtp_priv.h"
+}
 #include "webrtc/base/base64.h"
 #include "webrtc/base/buffer.h"
 #include "webrtc/base/byteorder.h"
@@ -509,7 +511,7 @@ bool SrtpSession::ProtectRtp(void* p, in
   }
   int seq_num;
   GetRtpSeqNum(p, in_len, &seq_num);
-  if (err != srtp_err_status_ok) {
+  if (err != err_status_ok) {
     LOG(LS_WARNING) << "Failed to protect SRTP packet, seqnum="
                     << seq_num << ", err=" << err << ", last seqnum="
                     << last_send_seq_num_;
@@ -547,7 +549,7 @@ bool SrtpSession::ProtectRtcp(void* p, i
   *out_len = in_len;
   int err = srtp_protect_rtcp(session_, p, out_len);
   srtp_stat_->AddProtectRtcpResult(err);
-  if (err != srtp_err_status_ok) {
+  if (err != err_status_ok) {
     LOG(LS_WARNING) << "Failed to protect SRTCP packet, err=" << err;
     return false;
   }
@@ -567,7 +569,7 @@ bool SrtpSession::UnprotectRtp(void* p,
   if (GetRtpSsrc(p, in_len, &ssrc)) {
     srtp_stat_->AddUnprotectRtpResult(ssrc, err);
   }
-  if (err != srtp_err_status_ok) {
+  if (err != err_status_ok) {
     LOG(LS_WARNING) << "Failed to unprotect SRTP packet, err=" << err;
     return false;
   }
@@ -584,7 +586,7 @@ bool SrtpSession::UnprotectRtcp(void* p,
   *out_len = in_len;
   int err = srtp_unprotect_rtcp(session_, p, out_len);
   srtp_stat_->AddUnprotectRtcpResult(err);
-  if (err != srtp_err_status_ok) {
+  if (err != err_status_ok) {
     LOG(LS_WARNING) << "Failed to unprotect SRTCP packet, err=" << err;
     return false;
   }
@@ -634,7 +636,7 @@ bool SrtpSession::GetSendStreamPacketInd
   // Shift packet index, put into network byte order
   *index = static_cast<int64_t>(
       rtc::NetworkToHost64(
-          srtp_rdbx_get_packet_index(&stream->rtp_rdbx) << 16));
+          rdbx_get_packet_index(&stream->rtp_rdbx) << 16));
   return true;
 }
 
@@ -657,20 +659,20 @@ bool SrtpSession::SetKey(int type, int c
   srtp_policy_t policy;
   memset(&policy, 0, sizeof(policy));
   if (cs == rtc::SRTP_AES128_CM_SHA1_80) {
-    srtp_crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtp);
-    srtp_crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtcp);
+    crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtp);
+    crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtcp);
   } else if (cs == rtc::SRTP_AES128_CM_SHA1_32) {
     // RTP HMAC is shortened to 32 bits, but RTCP remains 80 bits.
-    srtp_crypto_policy_set_aes_cm_128_hmac_sha1_32(&policy.rtp);
-    srtp_crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtcp);
+    crypto_policy_set_aes_cm_128_hmac_sha1_32(&policy.rtp);
+    crypto_policy_set_aes_cm_128_hmac_sha1_80(&policy.rtcp);
 #if !defined(ENABLE_EXTERNAL_AUTH)
     // TODO(jbauch): Re-enable once https://crbug.com/628400 is resolved.
   } else if (cs == rtc::SRTP_AEAD_AES_128_GCM) {
-    srtp_crypto_policy_set_aes_gcm_128_16_auth(&policy.rtp);
-    srtp_crypto_policy_set_aes_gcm_128_16_auth(&policy.rtcp);
+    crypto_policy_set_aes_gcm_128_16_auth(&policy.rtp);
+    crypto_policy_set_aes_gcm_128_16_auth(&policy.rtcp);
   } else if (cs == rtc::SRTP_AEAD_AES_256_GCM) {
-    srtp_crypto_policy_set_aes_gcm_256_16_auth(&policy.rtp);
-    srtp_crypto_policy_set_aes_gcm_256_16_auth(&policy.rtcp);
+    crypto_policy_set_aes_gcm_256_16_auth(&policy.rtp);
+    crypto_policy_set_aes_gcm_256_16_auth(&policy.rtcp);
 #endif  // ENABLE_EXTERNAL_AUTH
   } else {
     LOG(LS_WARNING) << "Failed to create SRTP session: unsupported"
@@ -694,7 +696,7 @@ bool SrtpSession::SetKey(int type, int c
     return false;
   }
 
-  policy.ssrc.type = static_cast<srtp_ssrc_type_t>(type);
+  policy.ssrc.type = static_cast<ssrc_type_t>(type);
   policy.ssrc.value = 0;
   policy.key = const_cast<uint8_t*>(key);
   // TODO(astor) parse window size from WSH session-param
@@ -713,7 +715,7 @@ bool SrtpSession::SetKey(int type, int c
   policy.next = nullptr;
 
   int err = srtp_create(&session_, &policy);
-  if (err != srtp_err_status_ok) {
+  if (err != err_status_ok) {
     session_ = nullptr;
     LOG(LS_ERROR) << "Failed to create SRTP session, err=" << err;
     return false;
@@ -731,19 +733,19 @@ bool SrtpSession::Init() {
   if (!inited_) {
     int err;
     err = srtp_init();
-    if (err != srtp_err_status_ok) {
+    if (err != err_status_ok) {
       LOG(LS_ERROR) << "Failed to init SRTP, err=" << err;
       return false;
     }
 
     err = srtp_install_event_handler(&SrtpSession::HandleEventThunk);
-    if (err != srtp_err_status_ok) {
+    if (err != err_status_ok) {
       LOG(LS_ERROR) << "Failed to install SRTP event handler, err=" << err;
       return false;
     }
 #if defined(ENABLE_EXTERNAL_AUTH)
     err = external_crypto_init();
-    if (err != srtp_err_status_ok) {
+    if (err != err_status_ok) {
       LOG(LS_ERROR) << "Failed to initialize fake auth, err=" << err;
       return false;
     }
@@ -855,10 +857,10 @@ void SrtpStat::AddProtectRtpResult(uint3
   key.ssrc = ssrc;
   key.mode = SrtpFilter::PROTECT;
   switch (result) {
-    case srtp_err_status_ok:
+    case err_status_ok:
       key.error = SrtpFilter::ERROR_NONE;
       break;
-    case srtp_err_status_auth_fail:
+    case err_status_auth_fail:
       key.error = SrtpFilter::ERROR_AUTH;
       break;
     default:
@@ -872,14 +874,14 @@ void SrtpStat::AddUnprotectRtpResult(uin
   key.ssrc = ssrc;
   key.mode = SrtpFilter::UNPROTECT;
   switch (result) {
-    case srtp_err_status_ok:
+    case err_status_ok:
       key.error = SrtpFilter::ERROR_NONE;
       break;
-    case srtp_err_status_auth_fail:
+    case err_status_auth_fail:
       key.error = SrtpFilter::ERROR_AUTH;
       break;
-    case srtp_err_status_replay_fail:
-    case srtp_err_status_replay_old:
+    case err_status_replay_fail:
+    case err_status_replay_old:
       key.error = SrtpFilter::ERROR_REPLAY;
       break;
     default:
Index: webrtc/src/webrtc/pc/externalhmac.cc
===================================================================
--- webrtc.orig/src/webrtc/pc/externalhmac.cc	2017-01-12 16:02:36.504516475 +0300
+++ webrtc/src/webrtc/pc/externalhmac.cc	2017-01-12 16:02:36.502516484 +0300
@@ -15,8 +15,10 @@
 #include "webrtc/base/logging.h"
 
 #ifdef HAVE_SRTP
-#include "third_party/libsrtp/crypto/include/crypto_kernel.h"
-#include "third_party/libsrtp/include/srtp.h"
+extern "C" {
+#include "srtp/crypto_kernel.h"
+#include "srtp/srtp.h"
+}
 #endif // HAVE_SRTP
 
 #if defined(HAVE_SRTP) && defined(ENABLE_EXTERNAL_AUTH)
@@ -52,19 +54,19 @@ static const char kExternalHmacDescripti
 
 // srtp_auth_type_t external_hmac is the hmac metaobject
 
-static const srtp_auth_type_t external_hmac  = {
+static const auth_type_t external_hmac  = {
   external_hmac_alloc,
   external_hmac_dealloc,
-  (srtp_auth_init_func)    external_hmac_init,
-  (srtp_auth_compute_func) external_hmac_compute,
-  (srtp_auth_update_func)  external_hmac_update,
-  (srtp_auth_start_func)   external_hmac_start,
+  (auth_init_func)    external_hmac_init,
+  (auth_compute_func) external_hmac_compute,
+  (auth_update_func)  external_hmac_update,
+  (auth_start_func)   external_hmac_start,
   const_cast<char*>(kExternalHmacDescription),
-  const_cast<srtp_auth_test_case_t*>(&kExternalHmacTestCase0),
+  const_cast<auth_test_case_t*>(&kExternalHmacTestCase0),
   EXTERNAL_HMAC_SHA1
 };
 
-srtp_err_status_t external_hmac_alloc(srtp_auth_t** a,
+err_status_t external_hmac_alloc(auth_t** a,
                                       int key_len,
                                       int out_len) {
   uint8_t* pointer;
@@ -72,83 +74,83 @@ srtp_err_status_t external_hmac_alloc(sr
   // Check key length - note that we don't support keys larger
   // than 20 bytes yet
   if (key_len > 20)
-    return srtp_err_status_bad_param;
+    return err_status_bad_param;
 
   // Check output length - should be less than 20 bytes/
   if (out_len > 20)
-    return srtp_err_status_bad_param;
+    return err_status_bad_param;
 
   // Allocate memory for auth and hmac_ctx_t structures.
   pointer = new uint8_t[(sizeof(ExternalHmacContext) + sizeof(srtp_auth_t))];
   if (pointer == NULL)
-    return srtp_err_status_alloc_fail;
+    return err_status_alloc_fail;
 
   // Set pointers
-  *a = (srtp_auth_t *)pointer;
+  *a = (auth_t *)pointer;
   // |external_hmac| is const and libsrtp expects |type| to be non-const.
   // const conversion is required. |external_hmac| is constant because we don't
   // want to increase global count in Chrome.
-  (*a)->type = const_cast<srtp_auth_type_t*>(&external_hmac);
-  (*a)->state = pointer + sizeof(srtp_auth_t);
+  (*a)->type = const_cast<auth_type_t*>(&external_hmac);
+  (*a)->state = pointer + sizeof(auth_t);
   (*a)->out_len = out_len;
   (*a)->key_len = key_len;
   (*a)->prefix_len = 0;
 
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
-srtp_err_status_t external_hmac_dealloc(srtp_auth_t* a) {
+err_status_t external_hmac_dealloc(auth_t* a) {
   // Zeroize entire state
-  memset((uint8_t *)a, 0, sizeof(ExternalHmacContext) + sizeof(srtp_auth_t));
+  memset((uint8_t *)a, 0, sizeof(ExternalHmacContext) + sizeof(auth_t));
 
   // Free memory
   delete[] a;
 
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
-srtp_err_status_t external_hmac_init(ExternalHmacContext* state,
+err_status_t external_hmac_init(ExternalHmacContext* state,
                                      const uint8_t* key,
                                      int key_len) {
   if (key_len > HMAC_KEY_LENGTH)
-    return srtp_err_status_bad_param;
+    return err_status_bad_param;
 
   memset(state->key, 0, key_len);
   memcpy(state->key, key, key_len);
   state->key_length = key_len;
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
-srtp_err_status_t external_hmac_start(ExternalHmacContext* state) {
-  return srtp_err_status_ok;
+err_status_t external_hmac_start(ExternalHmacContext* state) {
+  return err_status_ok;
 }
 
-srtp_err_status_t external_hmac_update(ExternalHmacContext* state,
+err_status_t external_hmac_update(ExternalHmacContext* state,
                                        const uint8_t* message,
                                        int msg_octets) {
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
-srtp_err_status_t external_hmac_compute(ExternalHmacContext* state,
+err_status_t external_hmac_compute(ExternalHmacContext* state,
                                        const void* message,
                                        int msg_octets,
                                        int tag_len,
                                        uint8_t* result) {
   memcpy(result, kExternalHmacFakeTag, tag_len);
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
-srtp_err_status_t external_crypto_init() {
+err_status_t external_crypto_init() {
   // |external_hmac| is const. const_cast is required as libsrtp expects
   // non-const.
-  srtp_err_status_t status = srtp_replace_auth_type(
-      const_cast<srtp_auth_type_t*>(&external_hmac), EXTERNAL_HMAC_SHA1);
+  err_status_t status = crypto_kernel_replace_auth_type(
+      const_cast<auth_type_t*>(&external_hmac), EXTERNAL_HMAC_SHA1);
   if (status) {
     LOG(LS_ERROR) << "Error in replacing default auth module, error: "
                   << status;
-    return srtp_err_status_fail;
+    return err_status_fail;
   }
-  return srtp_err_status_ok;
+  return err_status_ok;
 }
 
 #endif  // defined(HAVE_SRTP) && defined(ENABLE_EXTERNAL_AUTH)
Index: webrtc/src/webrtc/pc/externalhmac.h
===================================================================
--- webrtc.orig/src/webrtc/pc/externalhmac.h	2017-01-12 16:02:36.504516475 +0300
+++ webrtc/src/webrtc/pc/externalhmac.h	2017-01-12 16:02:36.503516479 +0300
@@ -30,7 +30,9 @@
 
 #include "webrtc/base/basictypes.h"
 #ifdef HAVE_SRTP
-#include "third_party/libsrtp/crypto/include/auth.h"
+extern "C" {
+#include "srtp/auth.h"
+}
 #endif  // HAVE_SRTP
 
 #if defined(HAVE_SRTP) && defined(ENABLE_EXTERNAL_AUTH)
@@ -46,29 +48,29 @@ typedef struct {
   int key_length;
 } ExternalHmacContext;
 
-srtp_err_status_t external_hmac_alloc(srtp_auth_t** a,
+err_status_t external_hmac_alloc(srtp_auth_t** a,
                                       int key_len,
                                       int out_len);
 
-srtp_err_status_t external_hmac_dealloc(srtp_auth_t* a);
+err_status_t external_hmac_dealloc(srtp_auth_t* a);
 
-srtp_err_status_t external_hmac_init(ExternalHmacContext* state,
+err_status_t external_hmac_init(ExternalHmacContext* state,
                                      const uint8_t* key,
                                      int key_len);
 
-srtp_err_status_t external_hmac_start(ExternalHmacContext* state);
+err_status_t external_hmac_start(ExternalHmacContext* state);
 
-srtp_err_status_t external_hmac_update(ExternalHmacContext* state,
+err_status_t external_hmac_update(ExternalHmacContext* state,
                                        const uint8_t* message,
                                        int msg_octets);
 
-srtp_err_status_t external_hmac_compute(ExternalHmacContext* state,
+err_status_t external_hmac_compute(ExternalHmacContext* state,
                                         const void* message,
                                         int msg_octets,
                                         int tag_len,
                                         uint8_t* result);
 
-srtp_err_status_t external_crypto_init();
+err_status_t external_crypto_init();
 
 #endif  // defined(HAVE_SRTP) && defined(ENABLE_EXTERNAL_AUTH)
 #endif  // WEBRTC_PC_EXTERNALHMAC_H_
