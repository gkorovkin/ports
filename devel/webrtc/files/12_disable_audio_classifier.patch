This patch removes implementation of AudioClassifier because it relies on libopus implementation details,
which are not available through the library API. Additionally, the implementation is using an old version of
libopus and is not compatible with the latest implementation. This allows us to use our common libopus
from the deb packages.

Index: webrtc/src/webrtc/modules/audio_coding/neteq/audio_classifier.cc
===================================================================
--- webrtc.orig/src/webrtc/modules/audio_coding/neteq/audio_classifier.cc	2017-01-12 16:03:06.282378214 +0300
+++ webrtc/src/webrtc/modules/audio_coding/neteq/audio_classifier.cc	2017-01-12 16:03:06.280378224 +0300
@@ -22,17 +22,8 @@ static const int kDefaultFrameSizeSample
 static const float kDefaultThreshold = 0.5f;
 
 AudioClassifier::AudioClassifier()
-    : analysis_info_(),
-      is_music_(false),
-      music_probability_(0),
-      // This actually assigns the pointer to a static constant struct
-      // rather than creates a struct and |celt_mode_| does not need
-      // to be deleted.
-      celt_mode_(opus_custom_mode_create(kDefaultSampleRateHz,
-                                         kDefaultFrameSizeSamples,
-                                         NULL)),
-      analysis_state_() {
-  assert(celt_mode_);
+    : is_music_(false),
+      music_probability_(0) {
 }
 
 AudioClassifier::~AudioClassifier() {}
@@ -40,31 +31,6 @@ AudioClassifier::~AudioClassifier() {}
 bool AudioClassifier::Analysis(const int16_t* input,
                                int input_length,
                                int channels) {
-  // Must be 20 ms frames at 48 kHz sampling.
-  assert((input_length / channels) == kDefaultFrameSizeSamples);
-
-  // Only mono or stereo are allowed.
-  assert(channels == 1 || channels == 2);
-
-  // Call Opus' classifier, defined in
-  // "third_party/opus/src/src/analysis.h", with lsb_depth = 16.
-  // Also uses a down-mixing function downmix_int, defined in
-  // "third_party/opus/src/src/opus_private.h", with
-  // constants c1 = 0, and c2 = -2.
-  run_analysis(&analysis_state_,
-               celt_mode_,
-               input,
-               kDefaultFrameSizeSamples,
-               kDefaultFrameSizeSamples,
-               0,
-               -2,
-               channels,
-               kDefaultSampleRateHz,
-               16,
-               downmix_int,
-               &analysis_info_);
-  music_probability_ = analysis_info_.music_prob;
-  is_music_ = music_probability_ > kDefaultThreshold;
   return is_music_;
 }
 
Index: webrtc/src/webrtc/modules/audio_coding/neteq/audio_classifier.h
===================================================================
--- webrtc.orig/src/webrtc/modules/audio_coding/neteq/audio_classifier.h	2017-01-12 16:03:06.282378214 +0300
+++ webrtc/src/webrtc/modules/audio_coding/neteq/audio_classifier.h	2017-01-12 16:03:06.280378224 +0300
@@ -11,16 +11,6 @@
 #ifndef WEBRTC_MODULES_AUDIO_CODING_NETEQ_AUDIO_CLASSIFIER_H_
 #define WEBRTC_MODULES_AUDIO_CODING_NETEQ_AUDIO_CLASSIFIER_H_
 
-#include "webrtc/base/ignore_wundef.h"
-
-extern "C" {
-RTC_PUSH_IGNORING_WUNDEF()
-#include "celt.h"
-RTC_POP_IGNORING_WUNDEF()
-#include "analysis.h"
-#include "opus_private.h"
-}
-
 #include "webrtc/typedefs.h"
 
 namespace webrtc {
@@ -46,11 +36,8 @@ class AudioClassifier {
   float music_probability() const { return music_probability_; }
 
  private:
-  AnalysisInfo analysis_info_;
   bool is_music_;
   float music_probability_;
-  const CELTMode* celt_mode_;
-  TonalityAnalysisState analysis_state_;
 };
 
 }  // namespace webrtc
