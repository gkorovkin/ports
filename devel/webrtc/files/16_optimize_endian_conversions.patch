Index: webrtc/src/webrtc/modules/rtp_rtcp/source/byte_io.h
===================================================================
--- webrtc.orig/src/webrtc/modules/rtp_rtcp/source/byte_io.h	2017-01-12 16:03:19.979315031 +0300
+++ webrtc/src/webrtc/modules/rtp_rtcp/source/byte_io.h	2017-01-12 16:03:19.976315045 +0300
@@ -273,6 +273,156 @@ class ByteWriter<T, 1, false> {
   }
 };
 
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
+// Specializations for two byte words
+template <typename T>
+class ByteReader<T, 2, false> {
+ public:
+  static T ReadBigEndian(const uint8_t* data) {
+    static_assert(sizeof(T) == 2, kSizeErrorMsg);
+    uint16_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408
+    return __builtin_bswap16(val);
+#else
+    __asm__
+    (
+      "xchgb %h0, %b0"
+      : "+Q" (val)
+    );
+    return val;
+#endif
+  }
+
+  static T ReadLittleEndian(const uint8_t* data) {
+    static_assert(sizeof(T) == 2, kSizeErrorMsg);
+    uint16_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+    return val;
+  }
+};
+
+template <typename T>
+class ByteWriter<T, 2, false> {
+ public:
+  static void WriteBigEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 2, kSizeErrorMsg);
+    if (!__builtin_constant_p(val)) {
+      uint16_t v = val;
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408
+      v = __builtin_bswap16(v);
+#else
+      __asm__
+      (
+        "xchgb %h0, %b0"
+        : "+Q" (v)
+      );
+#endif
+      __builtin_memcpy(data, &v, sizeof(v));
+    } else {
+      data[0] = val >> 8;
+      data[1] = val;
+    }
+  }
+
+  static void WriteLittleEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 2, kSizeErrorMsg);
+    uint16_t v = val;
+    __builtin_memcpy(data, &v, sizeof(v));
+  }
+};
+
+// Specializations for four byte words
+template <typename T>
+class ByteReader<T, 4, false> {
+ public:
+  static T ReadBigEndian(const uint8_t* data) {
+    static_assert(sizeof(T) >= 4, kSizeErrorMsg);
+    uint32_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+    return __builtin_bswap32(val);
+  }
+
+  static T ReadLittleEndian(const uint8_t* data) {
+    static_assert(sizeof(T) >= 4, kSizeErrorMsg);
+    uint32_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+    return val;
+  }
+};
+
+template <typename T>
+class ByteWriter<T, 4, false> {
+ public:
+  static void WriteBigEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 4, kSizeErrorMsg);
+    if (!__builtin_constant_p(val)) {
+      uint32_t v = __builtin_bswap32(val);
+      __builtin_memcpy(data, &v, sizeof(v));
+    } else {
+      data[0] = val >> 24;
+      data[1] = val >> 16;
+      data[2] = val >> 8;
+      data[3] = val;
+    }
+  }
+
+  static void WriteLittleEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 4, kSizeErrorMsg);
+    uint32_t v = val;
+    __builtin_memcpy(data, &v, sizeof(v));
+  }
+};
+
+// Specializations for eight byte words
+template <typename T>
+class ByteReader<T, 8, false> {
+ public:
+  static T ReadBigEndian(const uint8_t* data) {
+    static_assert(sizeof(T) >= 8, kSizeErrorMsg);
+    uint64_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+    return __builtin_bswap64(val);
+  }
+
+  static T ReadLittleEndian(const uint8_t* data) {
+    static_assert(sizeof(T) >= 8, kSizeErrorMsg);
+    uint64_t val;
+    __builtin_memcpy(&val, data, sizeof(val));
+    return val;
+  }
+};
+
+template <typename T>
+class ByteWriter<T, 8, false> {
+ public:
+  static void WriteBigEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 8, kSizeErrorMsg);
+    if (!__builtin_constant_p(val)) {
+      uint64_t v = __builtin_bswap64(val);
+      __builtin_memcpy(data, &v, sizeof(v));
+    } else {
+      data[0] = val >> 56;
+      data[1] = val >> 48;
+      data[2] = val >> 40;
+      data[3] = val >> 32;
+      data[4] = val >> 24;
+      data[5] = val >> 16;
+      data[6] = val >> 8;
+      data[7] = val;
+    }
+  }
+
+  static void WriteLittleEndian(uint8_t* data, T val) {
+    static_assert(sizeof(T) >= 8, kSizeErrorMsg);
+    uint64_t v = val;
+    __builtin_memcpy(data, &v, sizeof(v));
+  }
+};
+
+#else // defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
 // Specializations for two byte words
 template <typename T>
 class ByteReader<T, 2, false> {
@@ -403,6 +553,8 @@ class ByteWriter<T, 8, false> {
   }
 };
 
+#endif // defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
 }  // namespace webrtc
 
 #endif  // WEBRTC_MODULES_RTP_RTCP_SOURCE_BYTE_IO_H_
Index: webrtc/src/webrtc/base/byteorder.h
===================================================================
--- webrtc.orig/src/webrtc/base/byteorder.h	2017-01-12 16:03:19.979315031 +0300
+++ webrtc/src/webrtc/base/byteorder.h	2017-01-12 16:03:19.977315041 +0300
@@ -27,27 +27,142 @@ namespace rtc {
 // TODO: Optimized versions, with direct read/writes of
 // integers in host-endian format, when the platform supports it.
 
-inline void Set8(void* memory, size_t offset, uint8_t v) {
+inline void Set8(void* memory, size_t offset, uint8_t v) noexcept {
   static_cast<uint8_t*>(memory)[offset] = v;
 }
 
-inline uint8_t Get8(const void* memory, size_t offset) {
+inline uint8_t Get8(const void* memory, size_t offset) noexcept {
   return static_cast<const uint8_t*>(memory)[offset];
 }
 
-inline void SetBE16(void* memory, uint16_t v) {
+#if defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
+
+inline void SetBE16(void* memory, uint16_t v) noexcept {
+  uint8_t* data = static_cast< uint8_t* >(memory);
+  if (!__builtin_constant_p(v)) {
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408
+    v = __builtin_bswap16(v);
+#else
+    __asm__
+    (
+      "xchgb %h0, %b0"
+      : "+Q" (v)
+    );
+#endif
+    __builtin_memcpy(data, &v, sizeof(v));
+  } else {
+    data[0] = v >> 8;
+    data[1] = v;
+  }
+}
+
+inline void SetBE32(void* memory, uint32_t v) noexcept {
+  uint8_t* data = static_cast< uint8_t* >(memory);
+  if (!__builtin_constant_p(v)) {
+    v = __builtin_bswap32(v);
+    __builtin_memcpy(data, &v, sizeof(v));
+  } else {
+    data[0] = v >> 24;
+    data[1] = v >> 16;
+    data[2] = v >> 8;
+    data[3] = v;
+  }
+}
+
+inline void SetBE64(void* memory, uint64_t v) noexcept {
+  uint8_t* data = static_cast< uint8_t* >(memory);
+  if (!__builtin_constant_p(v)) {
+    v = __builtin_bswap64(v);
+    __builtin_memcpy(data, &v, sizeof(v));
+  } else {
+    data[0] = v >> 56;
+    data[1] = v >> 48;
+    data[2] = v >> 40;
+    data[3] = v >> 32;
+    data[4] = v >> 24;
+    data[5] = v >> 16;
+    data[6] = v >> 8;
+    data[7] = v;
+  }
+}
+
+inline uint16_t GetBE16(const void* memory) noexcept {
+  uint16_t val;
+  __builtin_memcpy(&val, memory, sizeof(val));
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408
+  return __builtin_bswap16(val);
+#else
+  __asm__
+  (
+    "xchgb %h0, %b0"
+    : "+Q" (val)
+  );
+  return val;
+#endif
+}
+
+inline uint32_t GetBE32(const void* memory) noexcept {
+  uint32_t val;
+  __builtin_memcpy(&val, memory, sizeof(val));
+  return __builtin_bswap32(val);
+}
+
+inline uint64_t GetBE64(const void* memory) noexcept {
+  uint64_t val;
+  __builtin_memcpy(&val, memory, sizeof(val));
+  return __builtin_bswap64(val);
+}
+
+inline void SetLE16(void* memory, uint16_t v) noexcept {
+  __builtin_memcpy(memory, &v, sizeof(v));
+}
+
+inline void SetLE32(void* memory, uint32_t v) noexcept {
+  __builtin_memcpy(memory, &v, sizeof(v));
+}
+
+inline void SetLE64(void* memory, uint64_t v) noexcept {
+  __builtin_memcpy(memory, &v, sizeof(v));
+}
+
+inline uint16_t GetLE16(const void* memory) noexcept {
+  uint16_t v;
+  __builtin_memcpy(&v, memory, sizeof(v));
+  return v;
+}
+
+inline uint32_t GetLE32(const void* memory) noexcept {
+  uint32_t v;
+  __builtin_memcpy(&v, memory, sizeof(v));
+  return v;
+}
+
+inline uint64_t GetLE64(const void* memory) noexcept {
+  uint64_t v;
+  __builtin_memcpy(&v, memory, sizeof(v));
+  return v;
+}
+
+// Check if the current host is big endian.
+inline constexpr bool IsHostBigEndian() noexcept {
+  return false;
+}
+
+#else // defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
+
+inline void SetBE16(void* memory, uint16_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 8));
   Set8(memory, 1, static_cast<uint8_t>(v >> 0));
 }
 
-inline void SetBE32(void* memory, uint32_t v) {
+inline void SetBE32(void* memory, uint32_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 24));
   Set8(memory, 1, static_cast<uint8_t>(v >> 16));
   Set8(memory, 2, static_cast<uint8_t>(v >> 8));
   Set8(memory, 3, static_cast<uint8_t>(v >> 0));
 }
 
-inline void SetBE64(void* memory, uint64_t v) {
+inline void SetBE64(void* memory, uint64_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 56));
   Set8(memory, 1, static_cast<uint8_t>(v >> 48));
   Set8(memory, 2, static_cast<uint8_t>(v >> 40));
@@ -58,18 +173,18 @@ inline void SetBE64(void* memory, uint64
   Set8(memory, 7, static_cast<uint8_t>(v >> 0));
 }
 
-inline uint16_t GetBE16(const void* memory) {
+inline uint16_t GetBE16(const void* memory) noexcept {
   return static_cast<uint16_t>((Get8(memory, 0) << 8) | (Get8(memory, 1) << 0));
 }
 
-inline uint32_t GetBE32(const void* memory) {
+inline uint32_t GetBE32(const void* memory) noexcept {
   return (static_cast<uint32_t>(Get8(memory, 0)) << 24) |
          (static_cast<uint32_t>(Get8(memory, 1)) << 16) |
          (static_cast<uint32_t>(Get8(memory, 2)) << 8) |
          (static_cast<uint32_t>(Get8(memory, 3)) << 0);
 }
 
-inline uint64_t GetBE64(const void* memory) {
+inline uint64_t GetBE64(const void* memory) noexcept {
   return (static_cast<uint64_t>(Get8(memory, 0)) << 56) |
          (static_cast<uint64_t>(Get8(memory, 1)) << 48) |
          (static_cast<uint64_t>(Get8(memory, 2)) << 40) |
@@ -80,19 +195,19 @@ inline uint64_t GetBE64(const void* memo
          (static_cast<uint64_t>(Get8(memory, 7)) << 0);
 }
 
-inline void SetLE16(void* memory, uint16_t v) {
+inline void SetLE16(void* memory, uint16_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 0));
   Set8(memory, 1, static_cast<uint8_t>(v >> 8));
 }
 
-inline void SetLE32(void* memory, uint32_t v) {
+inline void SetLE32(void* memory, uint32_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 0));
   Set8(memory, 1, static_cast<uint8_t>(v >> 8));
   Set8(memory, 2, static_cast<uint8_t>(v >> 16));
   Set8(memory, 3, static_cast<uint8_t>(v >> 24));
 }
 
-inline void SetLE64(void* memory, uint64_t v) {
+inline void SetLE64(void* memory, uint64_t v) noexcept {
   Set8(memory, 0, static_cast<uint8_t>(v >> 0));
   Set8(memory, 1, static_cast<uint8_t>(v >> 8));
   Set8(memory, 2, static_cast<uint8_t>(v >> 16));
@@ -103,18 +218,18 @@ inline void SetLE64(void* memory, uint64
   Set8(memory, 7, static_cast<uint8_t>(v >> 56));
 }
 
-inline uint16_t GetLE16(const void* memory) {
+inline uint16_t GetLE16(const void* memory) noexcept {
   return static_cast<uint16_t>((Get8(memory, 0) << 0) | (Get8(memory, 1) << 8));
 }
 
-inline uint32_t GetLE32(const void* memory) {
+inline uint32_t GetLE32(const void* memory) noexcept {
   return (static_cast<uint32_t>(Get8(memory, 0)) << 0) |
          (static_cast<uint32_t>(Get8(memory, 1)) << 8) |
          (static_cast<uint32_t>(Get8(memory, 2)) << 16) |
          (static_cast<uint32_t>(Get8(memory, 3)) << 24);
 }
 
-inline uint64_t GetLE64(const void* memory) {
+inline uint64_t GetLE64(const void* memory) noexcept {
   return (static_cast<uint64_t>(Get8(memory, 0)) << 0) |
          (static_cast<uint64_t>(Get8(memory, 1)) << 8) |
          (static_cast<uint64_t>(Get8(memory, 2)) << 16) |
@@ -126,38 +241,40 @@ inline uint64_t GetLE64(const void* memo
 }
 
 // Check if the current host is big endian.
-inline bool IsHostBigEndian() {
+inline bool IsHostBigEndian() noexcept {
   static const int number = 1;
   return 0 == *reinterpret_cast<const char*>(&number);
 }
 
-inline uint16_t HostToNetwork16(uint16_t n) {
+#endif // defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
+
+inline uint16_t HostToNetwork16(uint16_t n) noexcept {
   uint16_t result;
   SetBE16(&result, n);
   return result;
 }
 
-inline uint32_t HostToNetwork32(uint32_t n) {
+inline uint32_t HostToNetwork32(uint32_t n) noexcept {
   uint32_t result;
   SetBE32(&result, n);
   return result;
 }
 
-inline uint64_t HostToNetwork64(uint64_t n) {
+inline uint64_t HostToNetwork64(uint64_t n) noexcept {
   uint64_t result;
   SetBE64(&result, n);
   return result;
 }
 
-inline uint16_t NetworkToHost16(uint16_t n) {
+inline uint16_t NetworkToHost16(uint16_t n) noexcept {
   return GetBE16(&n);
 }
 
-inline uint32_t NetworkToHost32(uint32_t n) {
+inline uint32_t NetworkToHost32(uint32_t n) noexcept {
   return GetBE32(&n);
 }
 
-inline uint64_t NetworkToHost64(uint64_t n) {
+inline uint64_t NetworkToHost64(uint64_t n) noexcept {
   return GetBE64(&n);
 }
 
